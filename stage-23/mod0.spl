// resource manager module
alias functionNum R1;
alias currentPID R2;

if(functionNum == ACQUIRE_DISK) then

    while([DISK_STATUS_TABLE + 0] == 1) do
        [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
        multipush(R1, R2);
        call CONTEXT_SWITCH;
        multipop(R1, R2);
    endwhile;
    [DISK_STATUS_TABLE + 0] = 1; // state of the DISK
    [DISK_STATUS_TABLE + 4] = currentPID; // PID of the process which acquired disk
    return;
    

endif;




if(functionNum == ACQUIRE_TERMINAL) then
    while([TERMINAL_STATUS_TABLE + 0] == 1) do 
        [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        call MOD_5;
        multipop(R1, R2);
    endwhile;
    [TERMINAL_STATUS_TABLE + 0] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    // print "ACQUIRED";
    // breakpoint;
    return;

endif;

if(functionNum == RELEASE_TERMINAL) then
    if(currentPID != [TERMINAL_STATUS_TABLE + 1]) then
        R0 = -1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE + 0] = 0;
    alias cnt R1;
    cnt = 1; 
    while(cnt < MAX_PROC_NUM) do 
        if([PROCESS_TABLE + (cnt * 16) + 4] == WAIT_TERMINAL) then
            [PROCESS_TABLE + (cnt * 16) + 4] = READY;
        endif;
        cnt = cnt + 1;
    endwhile;
    R0 = 0;
    // print "RELEASED";
    //breakpoint;
    return;
endif;


	
if(functionNum==ACQUIRE_SEMAPHORE) then
	//takes pid of the current process as an argument
	alias current_pid R2;
	alias cnt R5;
	cnt=0;
	 while(cnt<MAX_SEM_COUNT) do 
	 	if([SEMAPHORE_TABLE+cnt*4+1]==0)  then //the semaphore is not used by any processes
			[SEMAPHORE_TABLE + cnt * 4 + 1]=1;
			[SEMAPHORE_TABLE + cnt * 4 + 0]=-1;
			R0=cnt;
			return;
		endif;	
		cnt=cnt+1;
	endwhile;	
	R0=-1;
	return;
endif;

if(functionNum==RELEASE_SEMAPHORE) then 
	alias index R2;
	alias current_pid R3;

	if([SEMAPHORE_TABLE + 4*index +0]==current_pid) then
		[SEMAPHORE_TABLE+ 4*index]=-1;
		alias cnt R4;
		cnt=0;
		while(cnt<MAX_PROC_NUM) do 
			if([PROCESS_TABLE+cnt*16+4]==WAIT_SEMAPHORE  &&[PROCESS_TABLE+cnt*16+5]==index) then 

			[PROCESS_TABLE+cnt*16+4]=READY;
			endif;
			cnt=cnt+1;
		endwhile;

	endif;

	if([SEMAPHORE_TABLE+4*index+1]>0) then 
		[SEMAPHORE_TABLE +4 *index +1]=[SEMAPHORE_TABLE+ 4 * index +1]-1;
	endif;

	R0=0;
	return;
endif;	


if(functionNum==ACQUIRE_INODE) then
	alias inode_index R2;
	alias curr_pid R3;

	//while the inode is locked

	while([FILE_STATUS_TABLE +4*inode_index ]!=-1) do 
		[PROCESS_TABLE +curr_pid*16 +4]=WAIT_FILE;
		[PROCESS_TABLE + curr_pid *16 +5]=inode_index;

		multipush(R1,R2,R3);
		call SCHEDULER;
		multipop(R1,R2,R3);
	endwhile;

	//check if the file has been deleted already

	if([INODE_TABLE +16*inode_index]==-1) then 
		R0=-1;
		return;
	endif;

	[PROCESS_TABLE +16*curr_pid + 4]=READY;

	[FILE_STATUS_TABLE +4*inode_index]=[PROCESS_TABLE+ curr_pid*16 +3];
	R0=0;
	return;
endif;


if(functionNum==RELEASE_INODE) then 
	alias inode_index R2;
	 alias curr_pid R3;

	 if([FILE_STATUS_TABLE +4*inode_index]!=curr_pid) then 
	 	R0=-1;
		return;
	endif;

	[FILE_STATUS_TABLE + 4*curr_pid ]=-1;
	//setting it to -1

	alias cnt R4;
	cnt =0;

	while(cnt<MAX_PROC_NUM) do 
		if([PROCESS_TABLE +16*curr_pid +4]==WAIT_FILE && [PROCESS_TABLE +16*curr_pid +5]==inode_index) then 
			[PROCESS_TABLE +16*curr_pid +4]=READY;
		endif;

		cnt=cnt+1;
	endwhile;

	R0=0;
	return;
endif;	






return;



