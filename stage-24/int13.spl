

//SEMGET AND SEMRELEASE
breakpoint;

alias userSP R2;
alias sys_call_num R3;

userSP=SP;
sys_call_num=[[PTBR + 2 * (userSP-5)/512] * 512 + (userSP-5)%512];

alias process_table R4;
alias current_pid R5;

current_pid=[SYSTEM_STATUS_TABLE+1];
process_table=PROCESS_TABLE + current_pid*16;

[process_table+13]=SP;
SP = [process_table+11] *512-1;

if(sys_call_num==INT_SEMGET) then 
	[process_table + 9]=INT_SEMGET;
	alias ctr R6;

	ctr=0;
	while(ctr<8) do 
		if([[process_table+11]*512 + 512 -16 +2*ctr]==-1) then 
			break;
		endif;
		ctr=ctr+1;
	endwhile;
	if(ctr==8) then 
		SP=userSP;
		[[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512]=-1;
		[process_table+9]=0;
		ireturn;
	endif;	
	breakpoint;
	multipush(R2,R3,R4,R5,R6);
	R2=current_pid;
	R1=ACQUIRE_SEMAPHORE;
	call RESOURCE_MANAGER;
	multipop(R2,R3,R4,R5,R6);
	
	//there are no free semaphores
	if(R0==-1) then
		[process_table+9]=0;
		[[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512]=-2;
		SP=userSP;
		ireturn;
	endif;	
		
	[[process_table+11]*512+512 -16+2*ctr]=SEMAPHORE;
	[[process_table+11]*512+512 -16+2*ctr + 1]=R0;
	SP=userSP;
	[process_table+9]=0;
	[[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512]=ctr;
	ireturn;
endif;

if(sys_call_num==INT_SEMRELEASE) then
	alias sem_id R6;

	[process_table+9]=18; //corresponding to the release function

	sem_id=[[PTBR + 2*(userSP-4)/512]*512 + (userSP-4) % 512];

	if(sem_id<0 || sem_id>=8  ||[[process_table + 11]*512 +512 -16+2*sem_id]!=SEMAPHORE) then 
		[[PTBR + 2*(userSP-1)/512]*512 +(userSP-1)%512]=-1;
		[process_table+9]=0;
		SP=userSP;
		ireturn;
	endif;
	
    multipush(R2, R3, R4, R5, R6);
    R1 = RELEASE_SEMAPHORE;
    R2 = [[process_table+11]*512 +512 -16 + 2 * sem_id + 1];
    R3 = current_pid;
    call RESOURCE_MANAGER;
    multipop(R2, R3, R4, R5, R6);

    // invalidating the per process resource table entry
    [[process_table +11]*512 +512 -16 + 2 * sem_id] = -1;
    [[process_table +11]*512 +512 -16 + 2 * sem_id + 1] = -1;

    // resetting the mode flag
    [process_table + 9] = 0;

    // return value is zero
    [[PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = 0;

    SP = userSP;
    ireturn; 
endif;














		

	

	
