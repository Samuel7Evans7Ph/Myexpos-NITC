// Process Manager Module

// function number is present in R1;
alias functionNum R1;


alias PID R2;

alias user_area_page R8;


if(functionNum == GET_PCB_ENTRY) then
    // no arguments for GET_PCB_ENTRY

    alias process_table_index R5;
    process_table_index = 0;
    while(process_table_index < MAX_PROC_NUM) do
        if([PROCESS_TABLE + process_table_index * 16 + 4] == TERMINATED) then
            [PROCESS_TABLE + process_table_index * 16 + 0] = 0;
            [PROCESS_TABLE + process_table_index * 16 + 1] = process_table_index;
            [PROCESS_TABLE + process_table_index * 16 + 4] = ALLOCATED;
            [PROCESS_TABLE + process_table_index * 16 + 14] = PAGE_TABLE_BASE + process_table_index * 20;
            [PROCESS_TABLE + process_table_index * 16 + 15] = 10;

            // return value
            R0 = process_table_index;
            return;


        endif;
        process_table_index = process_table_index + 1;

    endwhile;
    

    // if no process is found
    R0 = -1;
    return;





endif;



if(functionNum == FREE_USER_AREA_PAGE) then
    user_area_page = [PROCESS_TABLE + (PID * 16) + 11];


    alias user_area_page_end R9;
    user_area_page_end=user_area_page*512 +512 -16;
    alias ctr R10;
 	
    ctr=0;
    while(ctr<8) do 
    	if([user_area_page_end + 2*ctr]==SEMAPHORE &&[user_area_page_end +2*ctr +1]>=0 &&[user_area_page_end +2 *ctr +1]<8) then 
		multipush(R1,R2,R8,R9,R10);
		R1=RELEASE_SEMAPHORE;
		R2=[user_area_page_end +2*ctr +1];
		R3=PID;
		call RESOURCE_MANAGER;
		multipop(R1,R2,R8,R9,R10);
	endif;
    	if([user_area_page_end + 2*ctr]==FILE &&[user_area_page_end +2*ctr +1]>=0 &&[user_area_page_end +2 *ctr +1]<8) then 
		multipush(R1,R2,R8,R9,R10);
		R1=CLOSE;
		R2=[user_area_page_end +2*ctr +1];
		R3=PID;
		call FILE_MANAGER;
		multipop(R1,R2,R8,R9,R10);
	endif;


	[user_area_page_end +2*ctr]=-1;
	[user_area_page_end +2*ctr +1]=-1;
	ctr=ctr+1;
    

    
endwhile;	





    multipush(R1, R2, R8);
    // freeing user area page
    R1 = RELEASE_PAGE;
    R2 = user_area_page;
    call MEMORY_MANAGER;
    multipop(R1, R2, R8);
    return;
endif;

if(functionNum == EXIT_PROCESS) then
	alias process_table R10;
    PID = [SYSTEM_STATUS_TABLE + 1];
    process_table=PROCESS_TABLE+PID*16;

//invalidating the parent entry of the processes if the parent is the process that is going to exit now and setting the current processes waiting for the parent to ready

	if([process_table+9]!=INT_EXEC) then 
		alias ctr R11;
		
		ctr=0;
		while(ctr<16) do 
			if([PROCESS_TABLE+ctr*16+4]==WAIT_PROCESS && [PROCESS_TABLE+ctr*16+5]==PID) then
				[PROCESS_TABLE+ctr*16+4]=READY;
			endif;

			if ([PROCESS_TABLE+ctr*16+2]==PID) then 
				[PROCESS_TABLE+ctr*16+2]=-1;
			endif;	

			ctr=ctr+1;

		endwhile;
	endif;	
			



 multipush(R1, R2, R8);
    // deallocate page table entries
    R1 = FREE_PAGE_TABLE;
    R2 = PID;
    call PROCESS_MANAGER;

    // deallocating the user area page
    R1 = FREE_USER_AREA_PAGE;
    R2 = PID;
    call PROCESS_MANAGER;
    multipop(R1, R2, R8);
    [PROCESS_TABLE + (PID * 16) + 4] = TERMINATED;


endif;



if(functionNum == FREE_PAGE_TABLE) then
    alias page_table R9;

    // every process has 10 pages, and PID starts from 0
    // hence the page table corresponding to the current PID will be
    // PAGE_TABLE_BASE plus (PID * 10 * 2)
    // since each page is 2 words

    page_table = PAGE_TABLE_BASE + (PID * 20);
    // invalidating the library pages
    [page_table + 0] = -1;
    [page_table + 1] = "0000";
    [page_table + 2] = -1;
    [page_table + 3] = "0000";

    alias cnt R10;
    cnt = 0;

    while(cnt < 20) do 
        // invalidating each valid entry in page table
        if([page_table + cnt] != -1) then 
            multipush(R1, R2, R9, R10);
            R1 = RELEASE_PAGE;
            R2 = [page_table + cnt];
            call MEMORY_MANAGER;
            multipop(R1, R2, R9, R10);
            [page_table + cnt] = -1;
            [page_table + cnt + 1] = "0000";
        endif;
        // 2 words has been changed, so advancing by two words
        cnt = cnt + 2;
    endwhile;
    
    // invalidating the heap pages;
    cnt = 2;
    while(cnt < 4) do
        if([DISK_MAP_TABLE + PID * 10 + cnt] != -1) then

            multipush(R1, R2, R9, R10);
            R1 = RELEASE_BLOCK;
            R2 = [DISK_MAP_TABLE + PID * 10 + cnt];
            call MEMORY_MANAGER;
            multipop(R1, R2, R9, R10);
            
        endif;
        cnt = cnt + 1;
    endwhile;

    // invalidating the stack pages
    cnt = 8;
    while(cnt < 10) do 
        if([DISK_MAP_TABLE + PID * 10 + cnt] != -1) then
            
            multipush(R1, R2, R9, R10);
            R1 = RELEASE_BLOCK;
            R2 = [DISK_MAP_TABLE + PID * 10 + cnt];
            call MEMORY_MANAGER;

            multipop(R1, R2, R9, R10);


        endif;
        cnt = cnt + 1;
    endwhile;


    // invalidating all DISK_MAP_TABLE entries 
    
    cnt = 0;
    while(cnt < 10) do
        [DISK_MAP_TABLE + PID * 10 + cnt] = -1;
        cnt = cnt + 1;
    endwhile;


    return;
endif;

return;











