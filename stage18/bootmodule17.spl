
//timer
loadi(4,17);
loadi(5,18);

//library
loadi(63,13);
loadi(64,14);

//init
loadi(65,7);// loading for init program
loadi(66,8);

//int 10
loadi(22,35);
loadi(23,36);

//exhandler
loadi(2,15);
loadi(3,16);

//int 7
loadi(16,29);
loadi(17,30);

//mod 5
loadi(50,63);
loadi(51,64);//schedler loaded from disc blocks 63 and 64


//resource manager mod 0
loadi(40,53);
loadi(41,54);//loading module 0 from disk pages 

//mod4 devIce manager
loadi(48,61);
loadi(49,62);//laoding module 4 from disk pages

 //console interrupt
 loadi(8,21);
 loadi(9,22);
 //int6
 loadi(14,27);
 loadi(15,28);
 //int9
 loadi(20,33);
 loadi(21,34);
 //mod 1 process manager
 loadi(42,55);
 loadi(43,56);
 //mod2 memory manager 
 loadi(44,57);
 loadi(45,58);
 //inode table
 loadi(INODE_TABLE/PAGE_SIZE,3);
 loadi(INODE_TABLE/PAGE_SIZE+1,4);
 //diskinterrupt
 loadi(6,19);
 loadi(7,20);
 loadi(DISK_FREE_LIST/PAGE_SIZE,2);

[TERMINAL_STATUS_TABLE+0]=0;//initialising the status to 0 meaning it is free initially
[DISK_STATUS_TABLE+0]=0;
[TERMINAL_STATUS_TABLE+0]=0;
alias ctr R0; 
ctr=0;
while(ctr<MAX_PROC_NUM)do
	[PROCESS_TABLE+ctr*16+4]=TERMINATED;
	ctr=ctr+1;
endwhile;

PTBR=PAGE_TABLE_BASE+20;
PTLR=10;
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE+27]=80;//FOR INIT USER PAGE AREA
[PROCESS_TABLE+17]=1;//FOR INIT..pid
[PROCESS_TABLE+20]=CREATED;//
[PROCESS_TABLE+28]=0;//coz as of now everythign is assumed empty
[PROCESS_TABLE+29]=8*512;
[PROCESS_TABLE+30]=PAGE_TABLE_BASE+20;//INIT
[PROCESS_TABLE+31]=10;

[PROCESS_TABLE+16+ 13]=8*512;//the ptbr +36 index has the phy page in which the code starts for init
[76*512]=[65*512+1];

ctr=0;
while(ctr<83) do 	
	[MEMORY_FREE_LIST+ctr]=1;
	ctr=ctr+1;
endwhile;
ctr=83;
 
while(ctr<128) do 
	[MEMORY_FREE_LIST+ctr]=0;
	ctr=ctr+1;
endwhile; 
[SYSTEM_STATUS_TABLE+2]=128-83;
[SYSTEM_STATUS_TABLE+3]=0;
	
alias userAreaPage R1;
ctr=0;
//per-process resource table initialization for init
userAreaPage=[PROCESS_TABLE+16+11];
while(ctr<15)do
	[userAreaPage*512+512-16+ctr]=-1;
	[userAreaPage*512-16+ctr+1]=-1;
	ctr=ctr+2;
endwhile;


return;


